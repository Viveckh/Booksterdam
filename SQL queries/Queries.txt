DROP DATABASE xxxxxxx;

CREATE DATABASE xxxxxxx;

-----------------------------------------
-- QUERIES TO CREATE THE SCHEMA
-----------------------------------------

CREATE TABLE  CustomerRecords
	(customerID INT IDENTITY(100000001, 1),
	isSeller BIT DEFAULT 1,
	isBuyer BIT DEFAULT 1,
	lastName VARCHAR(40) NOT NULL,
	middleName VARCHAR(40),
	firstName VARCHAR(40) NOT NULL,
	street VARCHAR(40),
	city VARCHAR(20) NOT NULL,
	zipCode INT NOT NULL,
	stateName VARCHAR(2) NOT NULL,
	country VARCHAR(40) NOT NULL,
	phone INT NOT NULL,
	email VARCHAR(50) NOT NULL,
	CONSTRAINT pk_CustID PRIMARY KEY (customerID));


CREATE TABLE SchoolRecords
	(schoolID INT IDENTITY(5000, 1),
	schoolName VARCHAR(200) NOT NULL,
	city VARCHAR(20) NOT NULL,
	zipCode INT NOT NULL,
	stateName VARCHAR(2) NOT NULL,
	country VARCHAR(40) NOT NULL,
	CONSTRAINT pk_SchoolID PRIMARY KEY (schoolID));


CREATE TABLE BookRecords
	(ISBN BIGINT UNIQUE NOT NULL,
	title VARCHAR(200) NOT NULL,
	edition FLOAT,
	author VARCHAR(200),
	publisher VARCHAR(200),
	numberOfPages INT,
	imageURL VARCHAR(500),
	marketPrice FLOAT,
	CONSTRAINT pk_BookID PRIMARY KEY (ISBN));


CREATE TABLE ShelvesRecords
	(itemID INT IDENTITY(1000000001, 1),
	sellerID INT FOREIGN KEY REFERENCES CustomerRecords(customerID),
	schoolID INT FOREIGN KEY REFERENCES SchoolRecords(schoolID) NOT NULL,
	ISBN BIGINT NOT NULL,
	price FLOAT,
	isAvailable BIT DEFAULT 1,
	CONSTRAINT pk_ITEMID PRIMARY KEY (itemID));


CREATE TABLE OrderRecords
	(orderID INT IDENTITY(1000000001, 1),
	sellerID INT FOREIGN KEY REFERENCES CustomerRecords(customerID),
	buyerID INT FOREIGN KEY REFERENCES CustomerRecords(customerID),
	itemID INT FOREIGN KEY REFERENCES ShelvesRecords(itemID),
	CONSTRAINT pk_ORDERID PRIMARY KEY (orderID));


-------------------------------------------------------
-- QUERY TO INSERT A CUSTOMER INTO THE DATABASE
-------------------------------------------------------

INSERT INTO CustomerRecords (isSeller, isBuyer, lastName, middleName, firstName, street, city, zipCode, stateName, country, phone, email)
VALUES (1, 1, 'Maharjan', NULL, 'Sujil', '505 Ramapo Valley Road', 'Mahwah', 07430, 'NJ', 'United States of America', 2016754068, 'smaharj1@ramapo.edu');


------------------------------------------------------
-- QUERY TO INSERT A SCHOOL INTO SCHOOLRECORDS TABLE
------------------------------------------------------

INSERT INTO SchoolRecords(schoolName, city, zipCode, stateName, country)
VALUES ('Ramapo College of New Jersey', 'Mahwah', 07430, 'NJ', 'United States of America');


-----------------------------------------------
-- QUERIES TO INSERT DATA TO BOOKRECORDS TABLE
-----------------------------------------------

INSERT INTO BookRecords (ISBN, title, edition, author, publisher, numberOfPages, marketPrice) 
VALUES (1910561339, 'Guinness World Records 2017', NULL, 'Guinness World Records', 'Guinness World Records', 256, 21.67);

INSERT INTO BookRecords (ISBN, title, edition, author, publisher, numberOfPages, marketPrice) 
VALUES (1627790624, 'Killing the Rising Sun: How America Vanquished World War II Japan', 1, 'Bill O''Reily', 'Henry Holt and Co.', 336, 18);

INSERT INTO BookRecords (ISBN, title, edition, author, publisher, numberOfPages, marketPrice) 
VALUES (0062494600, 'Settle for More', NULL, 'Megyn Kelly', 'Harper', 352, 17.99);

INSERT INTO BookRecords (ISBN, title, edition, author, publisher, numberOfPages, marketPrice) 
VALUES (9781501141515, 'Born to Run', 1, 'Bruce Springsteen', 'Simon & Schuster', 528, 19.50);

---------------------------------------------------
-- QUERIES TO INSERT DATA TO SHELVESRECORDS TABLE
---------------------------------------------------
INSERT INTO ShelvesRecords (sellerID, schoolID, ISBN, price, isAvailable)
VALUES (100000001, 5000, 1910561339, 10, 1);

INSERT INTO ShelvesRecords (sellerID, schoolID, ISBN, price, isAvailable)
VALUES (100000001, 5000, 1627790624, 19, 1);

INSERT INTO ShelvesRecords (sellerID, schoolID, ISBN, price, isAvailable)
VALUES (100000002, 5000, 1627790624, 24, 1);

---------------------------------------------------------------------------------------------------------------------------------------------------------------
--Query that can be used in seller profile to display list of books that have been shelved by the seller (along with additional ISBN details from BookRecords)
--Just replace the cr.customerID term at the end of query with the associated seller ID and you have the desired list of books for that seller
----------------------------------------------------------------------------------------------------------------------------------------------------------------
SELECT br.ISBN, br.title, br.edition, br.author, br. publisher, br.numberOfPages, sr.price FROM ShelvesRecords sr JOIN bookRecords br 
ON (sr.ISBN = br.ISBN) AND (sr.itemID IN 
(SELECT sr1.itemID FROM ShelvesRecords sr1 JOIN CustomerRecords cr ON (sr1.sellerID = cr.customerID)));


-------------------------------------------------------------------------------------------------
--ALTERING DATA TYPE OF EXISTING COLUMN. MAKE SURE IT IS BEING CONVERTED TO A BIGGER TYPE ONLY
-------------------------------------------------------------------------------------------------
ALTER TABLE ShelvesRecords
ALTER COLUMN ISBN BIGINT;

-----------------------------------
--Adding constraint to a table
-----------------------------------
ALTER TABLE BookRecords
ADD CONSTRAINT pk_BookID PRIMARY KEY(ISBN);


--------------------------------------------------------------------------------------------------------------------------------------------
-- Queries to add a Foreign key column to a table, update column to a default for existing records and make that column NOT NULL for future
---------------------------------------------------------------------------------------------------------------------------------------------

ALTER TABLE ShelvesRecords
ADD schoolID INT FOREIGN KEY REFERENCES SchoolRecords(schoolID);

UPDATE ShelvesRecords
SET schoolID=5000;

ALTER TABLE ShelvesRecords
ALTER COLUMN schoolID INT NOT NULL;


--------------------------------------------------------------------------
--QUERY TO GET ALL THE NECESSARY INFORMATION TO DISPLAY ON THE THUMBNAIL
--------------------------------------------------------------------------

SELECT sr.itemID AS itemID, br.ISBN AS ISBN, br.title AS title, br.edition AS edition, br.author AS author, br.publisher AS publisher, br.marketPrice AS marketPrice, br.imageURL AS imageURL, scr.schoolName as schoolName, cr.lastName AS sellerLastName, cr.middleName AS sellerMiddleName, cr.firstName AS sellerFirstName, sr.price AS listedPrice
FROM ShelvesRecords sr 
JOIN CustomerRecords cr 
ON (sr.sellerID = cr.customerID)
JOIN BookRecords br
ON (sr.ISBN = br.ISBN)
JOIN SchoolRecords scr 
ON (sr.schoolID = scr.schoolID);

----------------------------------------------------------------
--QUERIES TO GET ALL THE AVAILABLE INFORMATION ON A LISTED ITEM
----------------------------------------------------------------

SELECT * FROM ShelvesRecords sr1 JOIN CustomerRecords cr ON (sr1.sellerID = cr.customerID);
SELECT * FROM ShelvesRecords sr2 JOIN BookRecords br ON (sr2.ISBN = br.ISBN);
SELECT * FROM ShelvesRecords sr3 JOIN SchoolRecords scr ON (sr3.schoolID = scr.schoolID);

